<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">


    
  <url>
    <loc>https://xander.wiki/2024/12/02/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0velox%E6%BA%90%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/</loc>
    <lastmod>2024-12-03T14:29:15.231Z</lastmod>
    <data>
        <display>
        <title>从0开始学习velox源码（一）</title>
        <pubTime>2024-12-02T12:32:00.000Z</pubTime>
        
        <tag>velox debug</tag>
         
        <tag>环境搭建</tag>
         
         
           
             
              <breadCrumb title="velox" url="https://xander.wiki/categories/velox/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2024/12/02/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0velox%E6%BA%90%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/</loc>
    <lastmod>2024-12-03T14:26:21.471Z</lastmod>
    <data>
        <display>
        <title>从0开始学习velox源码（二）</title>
        <pubTime>2024-12-02T14:26:00.000Z</pubTime>
        
        <tag>velox container</tag>
         
        <tag>RowContainer</tag>
         
         
           
             
              <breadCrumb title="velox" url="https://xander.wiki/categories/velox/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2024/01/21/clang-tidy%20customized%20checker%20example/</loc>
    <lastmod>2024-01-21T08:04:22.949Z</lastmod>
    <data>
        <display>
        <title>clang-tidy customized checker example</title>
        <pubTime>2024-01-21T03:04:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>tools</tag>
         
        <tag>clang</tag>
         
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2022/08/05/C++%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</loc>
    <lastmod>2024-01-21T07:40:22.443Z</lastmod>
    <data>
        <display>
        <title>C++模板元编程入门</title>
        <pubTime>2022-08-05T02:41:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板元编程</tag>
         
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2023/12/18/c++%20dev%20tools%20&&%20clang%20tools/</loc>
    <lastmod>2024-01-20T19:25:42.585Z</lastmod>
    <data>
        <display>
        <title>cpp dev tools && clang tools</title>
        <pubTime>2023-12-18T10:07:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>tools</tag>
         
        <tag>clang</tag>
         
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/03/OJ%20exercise4/</loc>
    <lastmod>2023-06-05T14:09:04.459Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（4）</title>
        <pubTime>2018-08-03T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2020/03/13/%E5%90%8C%E6%AD%A5%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/</loc>
    <lastmod>2023-06-05T14:09:04.459Z</lastmod>
    <data>
        <display>
        <title>同步并发操作——使用同步操作简化代码</title>
        <pubTime>2020-03-13T04:50:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/07/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</loc>
    <lastmod>2023-06-05T14:09:04.459Z</lastmod>
    <data>
        <display>
        <title>线程管理——线程管理基础</title>
        <pubTime>2019-04-07T03:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/15/%E4%B8%BA%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8%E8%80%8C%E5%8A%AA%E5%8A%9B/</loc>
    <lastmod>2023-06-05T11:24:40.905Z</lastmod>
    <data>
        <display>
        <title>30.为异常安全而努力</title>
        <pubTime>2018-04-15T04:36:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>异常</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
    
  <url>
    <loc>https://xander.wiki/2022/07/29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%87%B5%E6%87%82%E7%9A%84%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%BB%8F%E5%8E%86%E2%80%94%E2%80%94static_cast%E4%B8%8Efriend%E7%9B%B8%E5%85%B3/</loc>
    <lastmod>2022-08-01T14:00:26.000Z</lastmod>
    <data>
        <display>
        <title>记一次懵懂的源码阅读经历————static_cast，priavte继承与friend杂烩</title>
        <pubTime>2022-07-29T04:01:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2021/08/04/%E8%AE%BE%E8%AE%A1%E6%97%A0%E9%94%81%E5%B9%B6%E5%8F%91%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%97%A0%E9%94%81%E7%BB%93%E6%9E%84%E5%AE%9E%E4%BE%8B/</loc>
    <lastmod>2021-10-26T07:45:16.000Z</lastmod>
    <data>
        <display>
        <title>设计无锁并发数据结构——无锁结构实例</title>
        <pubTime>2021-08-04T07:17:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/13/%E8%80%83%E8%99%91%E7%94%A8%E6%9C%89%E5%BA%8Fvector%E4%BB%A3%E6%9B%BF%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</loc>
    <lastmod>2021-09-14T05:33:33.000Z</lastmod>
    <data>
        <display>
        <title>23.考虑用有序vector代替关联容器</title>
        <pubTime>2018-04-13T02:35:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
        <tag>关联容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2021/07/31/%E8%AE%BE%E8%AE%A1%E6%97%A0%E9%94%81%E5%B9%B6%E5%8F%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%A6%82%E8%BF%B0/</loc>
    <lastmod>2021-08-04T06:37:50.000Z</lastmod>
    <data>
        <display>
        <title>设计无锁并发数据结构——概述</title>
        <pubTime>2021-07-31T03:17:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2021/07/22/%E8%AE%BE%E8%AE%A1%E5%9F%BA%E4%BA%8E%E9%94%81%E7%9A%84%E5%B9%B6%E5%8F%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</loc>
    <lastmod>2021-07-31T03:00:09.000Z</lastmod>
    <data>
        <display>
        <title>设计基于锁的并发数据结构——更复杂的数据结构</title>
        <pubTime>2021-07-22T07:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2021/07/13/%E8%AE%BE%E8%AE%A1%E5%9F%BA%E4%BA%8E%E9%94%81%E7%9A%84%E5%B9%B6%E5%8F%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%B9%B6%E5%8F%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E4%BE%8B/</loc>
    <lastmod>2021-07-22T06:14:31.000Z</lastmod>
    <data>
        <display>
        <title>设计基于锁的并发数据结构——并发数据结构实例</title>
        <pubTime>2021-07-13T07:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2021/07/08/%E8%AE%BE%E8%AE%A1%E5%9F%BA%E4%BA%8E%E9%94%81%E7%9A%84%E5%B9%B6%E5%8F%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%B9%B6%E5%8F%91%E8%AE%BE%E8%AE%A1%E7%BA%B2%E8%A6%81/</loc>
    <lastmod>2021-07-08T09:09:07.000Z</lastmod>
    <data>
        <display>
        <title>设计基于锁的并发数据结构——并发设计纲要</title>
        <pubTime>2021-07-08T07:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2021/06/24/C++%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%8E%E5%BC%BA%E5%88%B6%E9%A1%BA%E5%BA%8F/</loc>
    <lastmod>2021-07-07T10:24:31.000Z</lastmod>
    <data>
        <display>
        <title>C++内存模型与原子类型操作——同步操作与强制顺序</title>
        <pubTime>2021-06-24T07:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2020/05/05/VimTutor/</loc>
    <lastmod>2021-07-06T06:21:27.000Z</lastmod>
    <data>
        <display>
        <title>VimTutor小结</title>
        <pubTime>2020-05-05T07:02:00.000Z</pubTime>
        
        <tag>Vim</tag>
         
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/19/Consider%20pass%20by%20value%20for%20copyable%20parameters/</loc>
    <lastmod>2021-07-01T07:10:07.000Z</lastmod>
    <data>
        <display>
        <title>41.Consider pass by value for copyable parameters that are cheap to move and always copied.</title>
        <pubTime>2018-07-19T04:15:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2020/06/02/C++%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B/</loc>
    <lastmod>2021-06-24T07:00:09.000Z</lastmod>
    <data>
        <display>
        <title>C++内存模型与原子类型操作——原子操作与原子类型</title>
        <pubTime>2020-06-02T09:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/26/80-20%E5%87%86%E5%88%99/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>16.80-20准则</title>
        <pubTime>2018-04-26T04:53:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/01/13.%E4%BB%A5const_iterator%E4%BB%A3%E6%9B%BFiterator/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>13.以const_iterator代替iterator</title>
        <pubTime>2018-07-01T07:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2020/03/14/C++%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>C++内存模型与原子类型操作——内存模型基础</title>
        <pubTime>2020-03-14T04:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/23/C++%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>2.C++式类型转换</title>
        <pubTime>2018-04-23T03:04:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型转换</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/12/Data%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Data%20Member%E7%9A%84%E5%B8%83%E5%B1%80/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Data语义学——Data Member的布局</title>
        <pubTime>2018-05-12T03:16:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/14/Data%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E7%9A%84%E6%95%88%E7%8E%87/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Data语义学——对象成员的效率</title>
        <pubTime>2018-05-14T01:46:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/11/Data%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%89%8D%E8%A8%80/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Data语义学——前言</title>
        <pubTime>2018-05-11T12:39:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/15/Function%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Member%E7%9A%84%E5%90%84%E7%A7%8D%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Function语义学——Member的各种调用方式</title>
        <pubTime>2018-05-15T02:26:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/13/Data%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF%E4%B8%8EData%20Member/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Data语义学——继承与Data Member</title>
        <pubTime>2018-05-13T04:01:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/14/Data%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E6%8C%87%E5%90%91Data%20Members%E7%9A%84%E6%8C%87%E9%92%88/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Data语义学——指向Data Members的指针</title>
        <pubTime>2018-05-14T01:58:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/16/Function%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Inline%20Function/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Function语义学——Inline Function</title>
        <pubTime>2018-05-16T07:27:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/14/Function%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%BC%E8%AF%BB/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Function语义学——导读</title>
        <pubTime>2018-05-14T04:21:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/15/Function%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Virtual%20Member%20Function/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Function语义学——Virtual Member Function</title>
        <pubTime>2018-05-15T04:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/16/Function%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E6%8C%87%E5%90%91Member%20Function%E7%9A%84%E6%8C%87%E9%92%88/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Function语义学——指向Member Function的指针</title>
        <pubTime>2018-05-16T02:52:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/16/Function%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%88%E8%83%BD/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>Function语义学——函数的效能</title>
        <pubTime>2018-05-16T01:52:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/26/Lazy%20evaluation/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>17.Lazy evaluation</title>
        <pubTime>2018-04-26T05:53:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/31/OJ%20exercise1/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（1）</title>
        <pubTime>2018-07-31T07:23:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/13/OJ%20exercise12/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（12）</title>
        <pubTime>2018-08-13T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/14/OJ%20exercise13/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（13）</title>
        <pubTime>2018-08-14T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/18/OJ%20exercise17/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（17）</title>
        <pubTime>2018-08-18T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/02/OJ%20exercise3/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（3）</title>
        <pubTime>2018-08-02T07:16:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/01/OJ%20exercise2/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（2）</title>
        <pubTime>2018-08-01T07:16:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/17/OJ%20exercise16/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（16）</title>
        <pubTime>2018-08-17T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/06/OJ%20exercise7/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（7）</title>
        <pubTime>2018-08-06T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/05/OJ%20exercise6/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（6）</title>
        <pubTime>2018-08-05T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/04/OJ%20exercise5/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（5）</title>
        <pubTime>2018-08-04T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/08/OJ%20exericse9/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（9）</title>
        <pubTime>2018-08-08T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/29/Proxy%20Class/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>30.Proxy Class</title>
        <pubTime>2018-04-29T07:04:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/07/OJ%20exercise8/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（8）</title>
        <pubTime>2018-08-07T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/09/STL%E5%AE%B9%E5%99%A8%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>12. STL容器的线程安全性</title>
        <pubTime>2018-04-09T01:59:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>多线程</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/14/const_iterator%E5%88%B0iterator%E7%9A%84%E8%BD%AC%E6%8D%A2(distance%E3%80%81advance)/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>27.const_iterator到iterator的转换(distance、advance)</title>
        <pubTime>2018-04-14T01:25:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>迭代器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/10/STL%E5%AE%B9%E5%99%A8%E4%B8%8EC%20API/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>16.STL容器与C API</title>
        <pubTime>2018-04-10T06:39:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/16/mismatch%E4%B8%8Elexicographical_compare/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>35.mismatch与lexicographical_compare</title>
        <pubTime>2018-04-16T05:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/15/erase_remove%E6%83%AF%E7%94%A8%E6%B3%95/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>32.erase_remove惯用法</title>
        <pubTime>2018-04-15T08:43:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/15/inline%E5%87%BD%E6%95%B0%E5%89%96%E6%9E%90/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>31.inline函数剖析</title>
        <pubTime>2018-04-15T09:48:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/02/macos%E7%8E%AF%E5%A2%83%E4%B8%8Bgtest%E7%9A%84%E4%BD%BF%E7%94%A8/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>macOS环境下gtest框架的使用</title>
        <pubTime>2019-04-02T04:20:00.000Z</pubTime>
        
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/25/placement%20new%E4%B8%8Eplacement%20delete/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>53.placement new与placement delete</title>
        <pubTime>2018-04-25T00:22:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>内存管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/10/string%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>15.string实现的多样性</title>
        <pubTime>2018-04-10T05:23:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/19/private%E7%BB%A7%E6%89%BF/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>40.private继承</title>
        <pubTime>2018-04-19T04:24:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/09/vector%E4%B8%8Estring%E7%9B%B8%E8%BE%83%E4%BA%8E%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E4%BC%98%E8%B6%8A%E6%80%A7/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>13. vector与string相较于动态数组的优越性</title>
        <pubTime>2018-04-09T03:48:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/16/public%E7%BB%A7%E6%89%BF%EF%BC%9Ais-a%E5%85%B3%E7%B3%BB/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>33.public继承：is-a关系</title>
        <pubTime>2018-04-16T04:59:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/06/%E4%B8%8D%E8%A6%81%E8%AF%95%E5%9B%BE%E7%BC%96%E5%86%99%E7%8B%AC%E7%AB%8B%E4%BA%8E%E5%AE%B9%E5%99%A8%E7%9A%84%E4%BB%A3%E7%A0%81/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>2.不要试图编写独立于容器的代码</title>
        <pubTime>2018-04-06T01:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/18/%E4%BA%86%E8%A7%A3accumulate%E4%B8%8Efor_each/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>37.了解accumulate与for_each</title>
        <pubTime>2018-04-18T04:30:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/08/%E4%B8%BA%E5%A4%9A%E6%80%81%E5%9F%BA%E7%B1%BB%E7%94%9F%E6%88%90virtual%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>8.为多态基类生成virtual析构函数</title>
        <pubTime>2018-04-08T01:33:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/08/%E4%BA%86%E8%A7%A3allocator%E7%9A%84%E7%BA%A6%E5%AE%9A%E4%B8%8E%E9%99%90%E5%88%B6md/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>10.了解allocator的约定与限制</title>
        <pubTime>2018-04-08T04:49:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/23/%E4%BA%86%E8%A7%A3auto%E6%8A%80%E6%9C%AF/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>2.了解auto技术</title>
        <pubTime>2018-06-22T23:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型推衍</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/20/%E4%BA%86%E8%A7%A3typename/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>43.了解typename</title>
        <pubTime>2018-04-20T06:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/19/%E4%BA%86%E8%A7%A3ptr_fun%E3%80%81mem_fun%E4%BB%A5%E5%8F%8Amem_fun_ref/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>41.了解ptr_fun、mem_fun以及mem_fun_ref</title>
        <pubTime>2018-04-19T03:23:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>仿函数</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/25/%E4%BA%86%E8%A7%A3decltype%E6%8A%80%E6%9C%AF/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>3.了解decltype技术</title>
        <pubTime>2018-06-24T23:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型推衍</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/24/%E4%BA%86%E8%A7%A3new-handler/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>50.了解new-handler</title>
        <pubTime>2018-04-24T01:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>内存管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/25/%E4%BA%86%E8%A7%A3%E4%B8%8D%E5%90%8C%E6%84%8F%E4%B9%89%E7%9A%84new%E4%B8%8Edelete/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>8.了解不同意义的new与delete</title>
        <pubTime>2018-04-25T01:25:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>内存管理</tag>
         
        <tag>操作符</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/27/%E4%BA%86%E8%A7%A3%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9D%A5%E6%BA%90/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>19.了解临时对象的来源</title>
        <pubTime>2018-04-27T03:18:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/15/%E4%BA%86%E8%A7%A3%E5%90%84%E7%B1%BB%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>31.了解各类排序算法</title>
        <pubTime>2018-04-15T03:11:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/25/%E4%BA%86%E8%A7%A3%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E8%A1%8D%E7%BB%93%E6%9E%9C/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>4.了解如何查看类型推衍结果</title>
        <pubTime>2018-06-25T09:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型推衍</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/15/%E4%BA%86%E8%A7%A3%E5%AE%8C%E7%BE%8Eforward%E7%9A%84%E4%B8%8D%E5%AE%8C%E7%BE%8E%E4%B9%8B%E5%A4%84/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>30.了解完美forward的不完美之处</title>
        <pubTime>2018-07-15T11:25:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/25/%E4%BA%86%E8%A7%A3%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8A%9B%E5%87%BA/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>12.了解异常的抛出</title>
        <pubTime>2018-04-25T11:20:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>异常</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/15/%E4%BA%86%E8%A7%A3%E5%BC%95%E7%94%A8%E5%A1%8C%E7%BC%A9/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>28.了解引用塌缩</title>
        <pubTime>2018-07-15T01:25:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/16/%E4%BA%86%E8%A7%A3%E7%AE%97%E6%B3%95%E5%AF%B9%E5%AE%B9%E5%99%A8%E7%9A%84%E8%A6%81%E6%B1%82/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>34.了解算法对容器的要求</title>
        <pubTime>2018-04-16T04:31:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/05/%E4%BB%94%E7%BB%86%E9%80%89%E6%8B%A9%E5%AE%B9%E5%99%A8/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>1.仔细选择容器</title>
        <pubTime>2018-04-05T13:45:12.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/04/%E4%BA%86%E8%A7%A3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>17.了解自动生成的特殊成员函数</title>
        <pubTime>2018-07-04T05:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/26/%E4%BA%86%E8%A7%A3%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%88%90%E6%9C%AC/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>15.了解异常处理的成本</title>
        <pubTime>2018-04-26T04:53:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>异常</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/20/%E4%BA%86%E8%A7%A3%E9%9A%90%E5%BC%8F%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BC%96%E8%AF%91%E6%9C%9F%E5%A4%9A%E6%80%81/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>42.了解隐式接口与编译期多态</title>
        <pubTime>2018-04-20T04:52:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/09/%E4%BB%A4operator=%E8%BF%94%E5%9B%9E%E8%87%AA%E8%BA%AB%E7%9A%84reference/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>11. 令operator=返回reference to *this</title>
        <pubTime>2018-04-09T01:43:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>操作符</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/29/%E4%BB%A5deleted%E5%87%BD%E6%95%B0%E5%8F%96%E4%BB%A3private%20undefined%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>11.以deleted函数取代private undefined函数</title>
        <pubTime>2018-06-29T12:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/18/%E4%BB%A4stdthread%E5%9C%A8%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84%E4%B8%8Aunjoinable/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>37.令std::thread在所有路径上unjoinable</title>
        <pubTime>2018-07-18T05:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/06/%E4%BB%A5make_unique%E6%88%96make_shared%E5%8F%96%E4%BB%A3%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8new/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>21.以make_unique或make_shared取代直接使用new</title>
        <pubTime>2018-07-05T23:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/27/%E4%BB%A5op=%E4%BB%A3%E6%9B%BFop/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>22.以op=代替op</title>
        <pubTime>2018-04-27T04:57:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
        <tag>操作符</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/28/%E4%BB%A5scoped%20enums%E4%BB%A3%E6%9B%BFunscoped%20enums/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>10.以scoped enums代替unscoped enums</title>
        <pubTime>2018-06-28T07:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/21/%E4%BB%A5%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%BB%A3%E6%9B%BF%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E8%B0%93%E8%AF%8D/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>46.以函数对象代替函数作为谓词</title>
        <pubTime>2018-04-21T02:36:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/10/%E4%BB%A5%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86%E8%B5%84%E6%BA%90/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>14.以对象管理资源</title>
        <pubTime>2018-04-10T04:01:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>资源管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/18/%E4%BB%BF%E5%87%BD%E6%95%B0%E7%B1%BB%E4%B8%8E%E5%80%BC%E4%BC%A0%E9%80%92/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>38.仿函数类与值传递</title>
        <pubTime>2018-04-18T09:53:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
        <tag>STL</tag>
         
        <tag>仿函数</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/26/%E4%BB%A5%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>13.以引用方式捕获异常</title>
        <pubTime>2018-04-26T02:09:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>异常</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/27/%E4%BD%BF%E7%94%A8alias%20declarations%E8%80%8C%E9%9D%9Etypedefs/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>9.使用alias declarations而非typedefs</title>
        <pubTime>2018-06-27T11:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/27/%E4%BD%BF%E7%94%A8nullptr%E8%80%8C%E9%9D%9E0%E6%88%96NULL/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>8.使用nullptr而非0或NULL</title>
        <pubTime>2018-06-27T09:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/30/%E4%BD%BF%E7%94%A8override%E6%9D%A5%E4%BF%AE%E9%A5%B0%E9%9C%80%E8%A6%81%E8%A6%86%E5%86%99%E7%9A%84%E8%99%9A%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>12.使用override来修饰需要覆写的虚函数</title>
        <pubTime>2018-06-29T23:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/17/%E4%BC%98%E5%85%88%E9%80%89%E6%8B%A9%E4%BB%BB%E5%8A%A1%E5%BC%8F%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%80%8C%E9%9D%9E%E7%BA%BF%E7%A8%8B%E5%BC%8F%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>35.优先选择任务式并发编程而非线程式并发编程</title>
        <pubTime>2018-07-17T02:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/14/%E4%BD%BF%E7%94%A8base%E5%B0%86reverse_iterator%E8%BD%AC%E4%B8%BAiterator/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>28.使用base将reverse_iterator转为iterator</title>
        <pubTime>2018-04-14T03:35:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>迭代器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/10/%E4%BD%BF%E7%94%A8reverse%E9%81%BF%E5%85%8D%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>14.使用reverse避免重新分配</title>
        <pubTime>2018-04-10T02:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/15/%E4%BD%BF%E7%94%A8%E7%AE%97%E6%B3%95%E5%89%8D%E7%A1%AE%E4%BF%9D%E7%9B%AE%E6%A0%87%E5%8C%BA%E9%97%B4%E8%B6%B3%E5%A4%9F%E5%A4%A7/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>30.使用算法前确保目标区间足够大</title>
        <pubTime>2018-04-15T01:52:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/23/%E4%BD%BF%E7%94%A8traits%20classes%E8%A1%A8%E7%8E%B0%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>48.使用traits classes表现类型信息</title>
        <pubTime>2018-04-23T03:31:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>迭代器</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/30/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E2%80%94%E2%80%94%E5%89%8D%E8%A8%80/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>关于对象——前言</title>
        <pubTime>2018-04-30T03:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/30/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E2%80%94%E2%80%94C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>关于对象——C++对象模式</title>
        <pubTime>2018-04-30T03:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/01/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E2%80%94%E2%80%94%E5%85%B3%E9%94%AE%E8%AF%8D%E6%89%80%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%B7%AE%E5%BC%82/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>关于对象——关键词所带来的差异</title>
        <pubTime>2018-05-01T02:01:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/08/%E5%88%87%E5%8B%BF%E5%88%9B%E5%BB%BA%E5%8C%85%E5%90%ABauto_ptr%E7%9A%84%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>8.切勿创建包含auto_ptr的容器对象</title>
        <pubTime>2018-04-08T01:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/12/%E5%88%86%E6%B8%85universal%20reference%E4%B8%8Ervalue%20reference/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>24.分清universal reference与rvalue reference</title>
        <pubTime>2018-07-11T23:02:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/07/%E5%8C%BA%E9%97%B4%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E4%BC%98%E4%BA%8E%E4%B8%8E%E4%B9%8B%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8D%95%E5%85%83%E7%B4%A0%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>5.区间成员函数优于与之对应的单元素成员函数</title>
        <pubTime>2018-04-07T01:48:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/18/%E5%8C%BA%E5%88%86%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>35.区分接口继承与实现继承</title>
        <pubTime>2018-04-18T02:28:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/24/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%AE%9A%E5%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>52.内存管理定式</title>
        <pubTime>2018-04-24T05:33:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>内存管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/25/%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E9%98%B2%E6%AD%A2%E8%B5%84%E6%BA%90%E6%B3%84%E6%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>10.在构造函数中防止资源泄漏</title>
        <pubTime>2018-04-25T03:04:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>资源管理</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/05/07/%E5%90%8C%E6%AD%A5%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E9%99%90%E5%88%B6%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>同步并发操作——限制等待时间</title>
        <pubTime>2019-05-07T04:50:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/10/%E5%9C%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E7%B1%BB%E4%B8%AD%E6%8F%90%E4%BE%9B%E5%AF%B9%E5%8E%9F%E5%A7%8B%E8%B5%84%E6%BA%90%E7%9A%84%E8%AE%BF%E9%97%AE/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>16.在资源管理类中提供对原始资源的访问</title>
        <pubTime>2018-04-10T10:28:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>资源管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/11/%E5%9C%A8%E4%BD%BF%E7%94%A8Pimpl%E6%97%B6%EF%BC%8C%E8%AE%B0%E5%BE%97%E5%9C%A8%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AE%9A%E4%B9%89special%20function/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>22.在使用Pimpl时，记得在实现文件中定义special function</title>
        <pubTime>2018-07-11T05:14:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/16/%E5%9C%A8%E5%AE%B9%E5%99%A8%E5%85%83%E7%B4%A0%E4%B8%BA%E6%8C%87%E9%92%88%E6%97%B6%E8%B0%A8%E6%85%8E%E4%BD%BF%E7%94%A8remove/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>33.在容器元素为指针时谨慎使用remove</title>
        <pubTime>2018-04-16T00:37:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/27/%E5%9C%A8%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%97%B6%E5%8C%BA%E5%88%86()%E4%B8%8E%7B%7D/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>7.在创建对象时区分()与{}</title>
        <pubTime>2018-06-27T08:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/23/%E5%9C%A8%E9%9C%80%E8%A6%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%97%B6%E8%AF%B7%E4%B8%BA%E6%A8%A1%E6%9D%BF%E5%AE%9A%E4%B9%89%E9%9D%9E%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>47.在需要类型转换时请为模板定义非成员函数</title>
        <pubTime>2018-04-22T23:59:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/21/%E5%A4%84%E7%90%86%E6%A8%A1%E6%9D%BF%E5%8C%96%E5%9F%BA%E7%B1%BB%E5%86%85%E7%9A%84%E5%90%8D%E7%A7%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>44.处理模板化基类内的名称</title>
        <pubTime>2018-04-21T01:26:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/04/%E5%9C%A8%E8%BF%9B%E8%A1%8C%E7%8B%AC%E5%8D%A0%E5%BC%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%97%B6%E4%BD%BF%E7%94%A8unique_ptr/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>18.在进行独占式资源管理时使用std::unique_ptr</title>
        <pubTime>2018-07-04T10:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/09/%E5%9C%A8operator=%E4%B8%AD%E5%A4%84%E7%90%86%E8%87%AA%E8%B5%8B%E5%80%BC/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>12. 在operator=中处理自赋值</title>
        <pubTime>2018-04-09T03:23:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>操作符</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/09/%E5%A4%8D%E5%88%B6%E5%AF%B9%E8%B1%A1%E5%8A%A1%E5%BF%85%E5%B0%BD%E5%96%84%E5%B0%BD%E7%BE%8E/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>13. 复制对象务必尽善尽美</title>
        <pubTime>2018-04-09T04:01:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/05/%E5%9C%A8%E8%BF%9B%E8%A1%8C%E5%85%B1%E4%BA%AB%E5%BC%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%97%B6%E4%BD%BF%E7%94%A8stdshared_ptr/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>19.在进行共享式资源管理时使用std::shared_ptr</title>
        <pubTime>2018-07-04T22:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/20/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>41.多重继承</title>
        <pubTime>2018-04-20T01:27:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/26/%E5%AE%A1%E6%85%8E%E4%BD%BF%E7%94%A8%E5%BC%82%E5%B8%B8%E6%98%8E%E7%BB%86/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>14.审慎使用异常明细</title>
        <pubTime>2018-04-26T02:50:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>异常</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/13/%E5%AF%B9%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E4%BD%BF%E7%94%A8move%EF%BC%8C%E5%AF%B9universal%20reference%E4%BD%BF%E7%94%A8forward/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>25.对右值引用使用move，对universal reference使用forward</title>
        <pubTime>2018-07-13T04:02:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/19/%E5%AF%B9%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8stdatomic,%E5%AF%B9special%20memory%E4%BD%BF%E7%94%A8volatile/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>40.对并发应用std::atomic,对special memory使用volatile</title>
        <pubTime>2018-07-19T01:15:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/18/%E5%AF%B9%E4%BA%8E%E4%B8%80%E6%AC%A1%E6%80%A7%E4%BA%8B%E4%BB%B6%E9%80%9A%E4%BF%A1%E8%80%83%E8%99%91%E9%87%87%E7%94%A8void%20future/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>39.对于一次性事件通信考虑采用void future</title>
        <pubTime>2018-07-18T09:08:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/21/%E5%90%8C%E6%AD%A5%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%E6%9C%9F%E6%9C%9B%E7%AD%89%E5%BE%85%E4%B8%80%E6%AC%A1%E6%80%A7%E4%BA%8B%E4%BB%B6/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>同步并发操作——使用future等待一次性事件</title>
        <pubTime>2019-04-21T02:50:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/21/%E5%B0%86%E5%8F%82%E6%95%B0%E6%97%A0%E5%85%B3%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8A%BD%E7%A6%BBtemplate/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>45.将参数无关的代码抽离template</title>
        <pubTime>2018-04-21T03:26:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/29/%E5%B0%86%E9%9D%9E%E5%B0%BE%E7%AB%AF%E7%B1%BB%E8%AE%BE%E8%AE%A1%E4%B8%BA%E6%8A%BD%E8%B1%A1%E7%B1%BB/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>33.将非尾端类设计为抽象类</title>
        <pubTime>2018-04-29T12:18:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/14/%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%BB%B6%E5%90%8E%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E5%BC%8F%E7%9A%84%E5%87%BA%E7%8E%B0%E6%97%B6%E9%97%B4/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>27.尽可能延后变量定义式的出现时间</title>
        <pubTime>2018-04-14T04:25:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/14/%E5%B0%BD%E9%87%8F%E9%81%BF%E5%85%8D%E8%BD%AC%E5%9E%8B%E6%93%8D%E4%BD%9C/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>28.尽量避免转型操作</title>
        <pubTime>2018-04-14T06:49:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型转换</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/13/%E5%B0%86%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E4%B8%BAprivate/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>23.将成员变量声明为private</title>
        <pubTime>2018-04-13T04:13:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/06/%E5%B0%BD%E9%87%8F%E4%BB%A5const%EF%BC%8Cenum%EF%BC%8Cinline%E6%9B%BF%E6%8D%A2#define/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>3.尽量以const，enum，inline替换#define</title>
        <pubTime>2018-04-06T11:21:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/17/%E5%B0%BD%E9%87%8F%E4%BB%A5lambda%E5%8F%96%E4%BB%A3std%20bind/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>34.尽量以lambda取代std::bind</title>
        <pubTime>2018-07-17T00:41:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/26/%E5%BD%93auto%E6%8E%A8%E8%A1%8D%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF%E6%97%B6%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%98%BE%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>6.当auto推衍类型错误时，使用显式初始化</title>
        <pubTime>2018-06-26T11:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>auto</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/29/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>29.引用计数</title>
        <pubTime>2018-04-29T03:56:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/02/%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8constexpr/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>15.尽量使用constexpr</title>
        <pubTime>2018-07-02T10:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/30/%E6%89%A7%E8%A1%8C%E6%9C%9F%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E4%B8%B4%E6%97%B6%E6%80%A7%E5%AF%B9%E8%B1%A1/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>执行期语义学——临时性对象</title>
        <pubTime>2018-05-30T04:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/16/%E5%BD%93%E9%9C%80%E8%A6%81forward%20auto&&%E5%8F%82%E6%95%B0%E6%97%B6%EF%BC%8C%E8%AE%B0%E5%BE%97%E9%87%87%E7%94%A8decltype/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>33.当需要forward auto&&参数时，记得采用decltype</title>
        <pubTime>2018-07-16T11:41:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/08/%E6%85%8E%E9%87%8D%E9%80%89%E6%8B%A9%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>9.慎重选择删除元素的方法</title>
        <pubTime>2018-04-08T02:15:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/29/%E6%89%A7%E8%A1%8C%E6%9C%9F%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%9E%90%E6%9E%84/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>执行期语义学——对象的构造与析构</title>
        <pubTime>2018-05-29T12:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/29/%E6%89%A7%E8%A1%8C%E6%9C%9F%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%BC%E8%AF%BB/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>执行期语义学——导读</title>
        <pubTime>2018-05-29T10:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/24/%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>7.禁止重载"&&"、"||"或","</title>
        <pubTime>2018-04-24T07:31:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>操作符</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/07/%E6%98%8E%E7%A1%AE%E6%8B%92%E7%BB%9D%E7%BC%96%E8%AF%91%E5%99%A8%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>7.明确拒绝编译器自动生成的函数</title>
        <pubTime>2018-04-07T09:21:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/28/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>28.智能指针</title>
        <pubTime>2018-04-28T11:56:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/04/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E6%A6%82%E8%BF%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>智能指针概述</title>
        <pubTime>2018-07-04T09:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/29/%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E3%80%81%E6%8B%B7%E8%B4%9D%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8A%9F%E8%83%BD/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>构造、析构、拷贝语义学——对象的功能</title>
        <pubTime>2018-05-29T06:30:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/11/%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%9A%E6%98%93%E4%BA%8E%E4%BD%BF%E7%94%A8%EF%BC%8C%E4%B8%8D%E6%98%93%E8%AF%AF%E7%94%A8/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>19.接口设计原则：易于使用，不易误用</title>
        <pubTime>2018-04-11T04:53:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/29/%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E3%80%81%E6%8B%B7%E8%B4%9D%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E6%9E%90%E6%9E%84%E8%AF%AD%E6%84%8F%E5%AD%A6/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>构造、析构、拷贝语义学——析构语意学</title>
        <pubTime>2018-05-29T06:36:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/03/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Copy%20Constructor%E7%9A%84%E5%BB%BA%E6%9E%84%E6%93%8D%E4%BD%9C/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>构造函数语义学——Copy Constructor的建构操作</title>
        <pubTime>2018-05-03T00:58:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/02/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Default%20Constructor%E7%9A%84%E6%9E%84%E9%80%A0%E6%93%8D%E4%BD%9C/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>构造函数语义学——Default Constructor的构造操作</title>
        <pubTime>2018-05-01T23:20:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/03/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E7%A8%8B%E5%BA%8F%E8%BD%AC%E5%8C%96%E8%AF%AD%E4%B9%89%E5%AD%A6/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>构造函数语义学——程序转化语义学</title>
        <pubTime>2018-05-03T03:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/10/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Member%20Initialization%20List/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>构造函数语义学——Member Initialization List</title>
        <pubTime>2018-05-10T02:47:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/21/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>45.查找算法</title>
        <pubTime>2018-04-20T23:20:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/20/%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B%E6%8E%A8%E8%A1%8D/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>1.了解模板类型推衍</title>
        <pubTime>2018-06-20T09:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型推衍</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/28/%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E3%80%81%E6%8B%B7%E8%B4%9D%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E6%97%A0%E7%BB%A7%E6%89%BF%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>构造、析构、拷贝语义学——"无继承“情况下的对象构造</title>
        <pubTime>2018-05-28T00:17:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/21/%E6%AD%A3%E7%A1%AE%E7%9A%84include/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>48.正确的include</title>
        <pubTime>2018-04-21T07:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/07/%E6%B3%A8%E6%84%8FC++%E7%9A%84%E5%88%86%E6%9E%90%E6%9C%BA%E5%88%B6/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>6.注意C++的分析机制</title>
        <pubTime>2018-04-07T05:57:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/20/%E7%94%A8less%E8%A1%A8%E7%A4%BAoperator/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>42.less&lt;T>与operator<</title>
        <pubTime>2018-04-19T23:23:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>仿函数</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/26/%E7%94%A8auto%E4%BB%A3%E6%9B%BF%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>5.用auto代替显式类型声明</title>
        <pubTime>2018-06-26T03:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>auto</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/11/%E7%9B%B8%E7%AD%89%E4%B8%8E%E7%AD%89%E4%BB%B7%E7%9A%84%E5%8C%BA%E5%88%AB/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>19.相等与等价的区别</title>
        <pubTime>2018-04-11T03:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
        <tag>关联容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/30/%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8C%E4%B8%8EC++/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>34.混合使用C与C++</title>
        <pubTime>2018-04-29T23:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/03/%E7%A1%AE%E4%BF%9Dconst%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>16.确保const成员函数线程安全</title>
        <pubTime>2018-07-03T12:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/08/%E7%A6%81%E6%AD%A2%E5%BC%82%E5%B8%B8%E7%A6%BB%E5%BC%80%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>9.禁止异常离开析构函数</title>
        <pubTime>2018-04-08T04:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>异常</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/06/%E7%A1%AE%E4%BF%9D%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%89%AF%E6%9C%AC%E6%AD%A3%E7%A1%AE%E4%B8%94%E9%AB%98%E6%95%88/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>3.确保容器中的对象副本正确且高效</title>
        <pubTime>2018-04-06T06:55:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/19/%E7%A6%81%E6%AD%A2%E9%87%8D%E5%AE%9A%E4%B9%89%E7%BB%A7%E6%89%BF%E8%80%8C%E6%9D%A5%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AE%9E%E5%8F%82/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>38.禁止重定义继承而来的默认实参</title>
        <pubTime>2018-04-19T01:09:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/31/%E7%AB%99%E5%9C%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A1%B6%E7%AB%AF%E2%80%94%E2%80%94RTTI/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>站在对象模型的顶端——RTTI</title>
        <pubTime>2018-05-31T06:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/07/%E7%A1%AE%E5%AE%9A%E5%AF%B9%E8%B1%A1%E8%A2%AB%E4%BD%BF%E7%94%A8%E5%89%8D%E5%B7%B2%E7%BB%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>5.确定对象被使用前已经初始化</title>
        <pubTime>2018-04-07T02:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/18/%E7%A6%81%E6%AD%A2%E9%87%8D%E5%AE%9A%E4%B9%89%E7%BB%A7%E6%89%BF%E8%80%8C%E6%9D%A5%E7%9A%84non-virtual%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>37.禁止重定义继承而来的non-virtual函数</title>
        <pubTime>2018-04-18T10:33:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/31/%E7%AB%99%E5%9C%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A1%B6%E7%AB%AF%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>站在对象模型的顶端——异常处理</title>
        <pubTime>2018-05-31T05:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/05/%E7%B1%BBshared_ptr%E4%BD%86%E5%8F%AF%E7%A9%BA%E6%82%AC%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88weak_ptr/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>20.类shared_ptr但可空悬的智能指针——std::weak_ptr</title>
        <pubTime>2018-07-05T06:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/06/19/%E7%B1%BB%E5%9E%8B%E6%8E%A8%E8%A1%8D%E7%AB%A0%E8%8A%82%E5%89%8D%E8%A8%80/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>类型推衍</title>
        <pubTime>2018-06-18T23:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型推衍</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/07/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94%E5%90%91%E7%BA%BF%E7%A8%8B%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>线程管理——向线程函数传递参数</title>
        <pubTime>2019-04-07T08:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/30/%E7%AB%99%E5%9C%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A1%B6%E7%AB%AF%E2%80%94%E2%80%94Template/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>站在对象模型的顶端——Template</title>
        <pubTime>2018-05-30T05:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/31/%E7%AB%99%E5%9C%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A1%B6%E7%AB%AF%E2%80%94%E2%80%94%E5%BC%B9%E6%80%A7/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>站在对象模型的顶端——弹性</title>
        <pubTime>2018-05-31T06:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/17/%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94%E4%BF%9D%E6%8A%A4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9B%BF%E4%BB%A3%E8%AE%BE%E6%96%BD/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>线程间共享数据——保护共享数据的替代设施</title>
        <pubTime>2019-04-17T07:14:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/16/%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%E4%BA%92%E6%96%A5%E9%87%8F%E4%BF%9D%E6%8A%A4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>线程间共享数据——使用互斥量保护共享数据</title>
        <pubTime>2019-04-16T00:20:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/08/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94%E8%BF%90%E8%A1%8C%E6%9C%9F%E5%86%B3%E5%AE%9A%E7%BA%BF%E7%A8%8B%E6%95%B0%E9%87%8F/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>线程管理——运行期决定线程数量</title>
        <pubTime>2019-04-08T04:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/08/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94%E8%BD%AC%E7%A7%BB%E7%BA%BF%E7%A8%8B%E6%89%80%E6%9C%89%E6%9D%83/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>线程管理——转移线程所有权</title>
        <pubTime>2019-04-08T02:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/24/%E8%87%AA%E5%A2%9E%EF%BC%8C%E8%87%AA%E5%87%8F%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%89%8D%E7%BD%AE%E4%B8%8E%E5%90%8E%E7%BD%AE%E7%9A%84%E5%8C%BA%E5%88%AB/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>6.自增，自减操作符前置与后置的区别</title>
        <pubTime>2018-04-24T05:18:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>操作符</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/09/%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>线程间共享数据——共享数据导致的问题</title>
        <pubTime>2019-04-09T05:07:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/27/%E8%80%83%E8%99%91%E5%8F%98%E6%9B%B4%E7%A8%8B%E5%BA%8F%E5%BA%93/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>23.考虑变更程序库</title>
        <pubTime>2018-04-27T05:17:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/09/%E8%87%AA%E5%AE%9A%E4%B9%89allocator%E7%9A%84%E5%90%88%E7%90%86%E7%94%A8%E6%B3%95/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>11. 自定义allocator的合理用法</title>
        <pubTime>2018-04-09T01:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/19/%E8%80%83%E8%99%91%E4%BB%A5emplacement%E4%BB%A3%E6%9B%BFinsertion/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>42.考虑以emplacement代替insertion</title>
        <pubTime>2018-07-19T10:15:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/14/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%8A%9B%E5%BC%82%E5%B8%B8%E7%9A%84swap%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>26.自定义一个不抛异常的swap函数</title>
        <pubTime>2018-04-14T01:48:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/24/%E8%87%AA%E5%AE%9A%E4%B9%89new%E4%B8%8Edelete/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>51.自定义new与delete</title>
        <pubTime>2018-04-24T04:19:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>内存管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/18/%E8%87%AA%E5%AE%9A%E4%B9%89copy_if%E7%AE%97%E6%B3%95/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>36.自定义copy_if算法</title>
        <pubTime>2018-04-18T02:03:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/06/%E8%A7%86C++%E4%B8%BA%E8%AF%AD%E8%A8%80%E8%81%94%E9%82%A6/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>2.视C++为语言联邦</title>
        <pubTime>2018-04-06T05:00:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/28/%E8%99%9A%E6%8B%9F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>25.虚拟工厂模式</title>
        <pubTime>2018-04-28T01:03:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/28/%E8%A6%81%E6%B1%82%E6%88%96%E7%A6%81%E6%AD%A2%E5%9C%A8%E5%A0%86%E4%B8%AD%E4%BA%A7%E7%94%9F%E5%AF%B9%E8%B1%A1/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>27.要求或禁止在堆中产生对象</title>
        <pubTime>2018-04-28T08:56:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/12/%E8%AE%BE%E8%AE%A1class%E7%8A%B9%E5%A6%82%E8%AE%BE%E8%AE%A1type/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>20.设计class犹如设计type</title>
        <pubTime>2018-04-12T01:17:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/29/%E8%AE%A9%E5%87%BD%E6%95%B0%E6%A0%B9%E6%8D%AE%E4%B8%80%E4%B8%AA%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E6%9D%A5%E5%86%B3%E5%AE%9A%E5%A6%82%E4%BD%95%E8%99%9A%E5%8C%96/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>31.让函数根据一个以上的对象类型来决定如何虚化</title>
        <pubTime>2018-04-29T09:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2020/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%91/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>计算机网络与互联网</title>
        <pubTime>2020-05-04T05:29:00.000Z</pubTime>
        
        <tag>Computer Network</tag>
         
         
           
             
              <breadCrumb title="Computer Networking A Top-Down Approach" url="https://xander.wiki/categories/Computer-Networking-A-Top-Down-Approach/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/06/%E8%B0%83%E7%94%A8empty%E8%80%8C%E4%B8%8D%E6%98%AF%E6%A3%80%E6%9F%A5size==0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>4.调用empty而不是检查size==0</title>
        <pubTime>2018-04-06T12:27:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/10/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E7%B1%BB%E4%B8%AD%E7%9A%84copying%E8%A1%8C%E4%B8%BA/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>15.资源管理类中的copying行为</title>
        <pubTime>2018-04-10T05:55:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>资源管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/19/%E9%80%9A%E8%BF%87%E5%A4%8D%E5%90%88%E5%A1%91%E9%80%A0%E5%87%BAhas-a%E6%88%96%E6%A0%B9%E6%8D%AE%E6%9F%90%E7%89%A9%E5%AE%9E%E7%8E%B0%E5%87%BA/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>39.通过复合塑造出"has-a"或"根据某物实现出"</title>
        <pubTime>2018-04-19T02:24:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/21/%E9%81%BF%E5%85%8D%E4%BA%A7%E5%87%BAwrite-only%20code/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>47.避免产出write-only code</title>
        <pubTime>2018-04-21T02:39:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/27/%E9%80%9A%E8%BF%87%E9%87%8D%E8%BD%BD%E9%81%BF%E5%85%8D%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>21.通过重载避免隐式转换</title>
        <pubTime>2018-04-27T04:35:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/27/%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>20.返回值优化</title>
        <pubTime>2018-04-27T03:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/21/%E8%BF%90%E7%94%A8member%20function%20template%E6%8E%A5%E5%8F%97%E6%89%80%E6%9C%89%E5%85%BC%E5%AE%B9%E7%B1%BB%E5%9E%8B/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>46.运用member function template接受所有兼容类型</title>
        <pubTime>2018-04-21T07:29:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/13/%E9%81%BF%E5%85%8D%E9%92%88%E5%AF%B9universal%20reference%E4%BD%9C%E5%87%BA%E9%87%8D%E8%BD%BD/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>26.避免针对universal reference作出重载</title>
        <pubTime>2018-07-13T08:02:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/23/%E9%81%BF%E5%85%8D%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>4.避免无意义的默认构造函数</title>
        <pubTime>2018-04-23T06:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/15/%E9%81%BF%E5%85%8D%E8%BF%94%E5%9B%9E%E6%8C%87%E5%90%91%E5%AF%B9%E8%B1%A1%E5%86%85%E9%83%A8%E6%88%90%E5%88%86%E7%9A%84handles/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>29.避免返回指向对象内部成分的handles</title>
        <pubTime>2018-04-15T02:18:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/14/%E9%9C%80%E8%A6%81%E4%BE%9D%E6%AC%A1%E5%BD%95%E5%85%A5%E5%AD%97%E7%AC%A6%E6%97%B6%E8%80%83%E8%99%91%E4%BD%BF%E7%94%A8istreambuf_iterator/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>29.需要依次录入字符时考虑使用istreambuf_iterator</title>
        <pubTime>2018-04-14T05:24:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>迭代器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/13/%E9%92%88%E5%AF%B9%E6%80%A7%E5%9C%B0%E4%BD%BF%E7%94%A8map_operator%5B%5D%E4%B8%8Emap_insert/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>24.针对性地使用map::operator[]与map::insert</title>
        <pubTime>2018-04-13T05:03:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
        <tag>关联容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/16/%E9%81%BF%E5%85%8D%E9%81%AE%E8%94%BD%E7%BB%A7%E6%89%BF%E8%80%8C%E6%9D%A5%E7%9A%84%E5%90%8D%E5%AD%97/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>34.避免遮蔽继承而来的名字</title>
        <pubTime>2018-04-16T07:19:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/16/%E9%99%8D%E4%BD%8E%E6%96%87%E4%BB%B6%E9%97%B4%E7%9A%84%E7%BC%96%E8%AF%91%E4%BE%9D%E5%AD%98%E5%85%B3%E7%B3%BB/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>32.降低文件间的编译依存关系</title>
        <pubTime>2018-04-16T01:13:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/28/%E9%99%90%E5%88%B6%E6%9F%90%E4%B8%AA%E7%B1%BB%E6%89%80%E8%83%BD%E4%BA%A7%E7%94%9F%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%95%B0%E9%87%8F/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>26.限制某个类所能产生的对象数量</title>
        <pubTime>2018-04-28T02:03:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/29/%E9%9D%A2%E5%90%91%E6%9C%AA%E6%9D%A5%E7%BC%96%E7%A8%8B/</loc>
    <lastmod>2021-06-23T07:44:08.000Z</lastmod>
    <data>
        <display>
        <title>32.面向未来编程</title>
        <pubTime>2018-04-29T11:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/01/14.%E8%8B%A5%E5%87%BD%E6%95%B0%E4%B8%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8%EF%BC%8C%E5%88%99%E5%B0%86%E5%85%B6%E5%A3%B0%E6%98%8E%E4%B8%BAnoexcept/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>14.若函数不会发生异常，则将其声明为noexcept</title>
        <pubTime>2018-07-01T08:42:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/17/C++%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>C++并发编程</title>
        <pubTime>2018-07-17T02:41:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/12/Data%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Data%20Member%E7%9A%84%E5%AD%98%E5%8F%96/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>Data语义学——Data Member的存取</title>
        <pubTime>2018-05-12T06:01:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/12/Data%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94Data%20Member%E7%9A%84%E7%BB%91%E5%AE%9A/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>Data语义学——Data Member的绑定</title>
        <pubTime>2018-05-12T01:16:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/03/23/MacOS%E7%8E%AF%E5%A2%83%E4%B8%8Bgcc%E7%9A%84%E9%85%8D%E7%BD%AE/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>macOS环境gcc配置</title>
        <pubTime>2019-03-23T11:33:00.000Z</pubTime>
        
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/16/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>Lambda表达式</title>
        <pubTime>2018-07-16T00:50:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/09/OJ%20exercise10/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（10）</title>
        <pubTime>2018-08-09T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/10/OJ%20exercise11/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（11）</title>
        <pubTime>2018-08-10T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/15/OJ%20exercise14/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（14）</title>
        <pubTime>2018-08-15T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/08/16/OJ%20exercise15/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>OJ每日练习（15）</title>
        <pubTime>2018-08-16T05:40:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Data Structures and Algorithms</tag>
         
         
           
             
              <breadCrumb title="OJ Exercises" url="https://xander.wiki/categories/OJ-Exercises/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/26/Over-eager%20evaluation/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>18.Over-eager evaluation</title>
        <pubTime>2018-04-26T06:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/11/new%E4%B8%8Edelete%E6%88%90%E5%AF%B9%E4%BD%BF%E7%94%A8%E6%97%B6%E5%BF%85%E9%A1%BB%E5%BD%A2%E5%BC%8F%E7%9B%B8%E5%90%8C/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>17.new与delete成对使用时必须形式相同</title>
        <pubTime>2018-04-11T00:45:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>资源管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/11/swap%E5%8E%BB%E9%99%A4%E5%A4%9A%E4%BD%99%E5%AE%B9%E9%87%8F/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>17.swap去除多余容量</title>
        <pubTime>2018-04-11T00:10:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/14/universal%20reference%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88%E4%B8%8E%E4%BF%AE%E6%AD%A3/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>27.universal reference的替代方案与修正</title>
        <pubTime>2018-07-14T11:25:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/03/21/vultr%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E8%84%9A%E6%9C%AC%E5%A4%87%E4%BB%BD/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>vultr科学上网脚本备份</title>
        <pubTime>2019-03-21T14:24:00.000Z</pubTime>
        
         
           
             
              <breadCrumb title="杂项" url="https://xander.wiki/categories/%E6%9D%82%E9%A1%B9/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/08/%E4%B8%8D%E5%9C%A8%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B0%83%E7%94%A8virtual%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>10.绝不在构造和析构过程中调用virtual函数</title>
        <pubTime>2018-04-08T10:56:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/15/%E4%B8%8D%E5%BF%85%E9%AB%98%E4%BC%B0move%E8%AF%AD%E4%B9%89/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>29.不必高估move语义</title>
        <pubTime>2018-07-15T01:25:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/12/%E4%B8%BA%E5%90%AB%E6%9C%89%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8%E6%8C%87%E5%AE%9A%E6%AF%94%E8%BE%83%E7%B1%BB%E5%9E%8B/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>20.为含有指针的关联容器指定比较类型</title>
        <pubTime>2018-04-11T23:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
        <tag>关联容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/07/%E4%BA%86%E8%A7%A3C++%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B8%8E%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>6.了解C++自动生成与调用的函数</title>
        <pubTime>2018-04-07T06:47:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/27/%E4%BA%86%E8%A7%A3%E8%99%9A%E5%87%BD%E6%95%B0%E3%80%81%E5%A4%9A%E7%BB%A7%E6%89%BF%E3%80%81%E8%99%9A%E5%9F%BA%E7%B1%BB%E3%80%81RTTI%E6%89%80%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%88%90%E6%9C%AC/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>24.了解虚函数、多继承、虚基类、RTTI所带来的成本</title>
        <pubTime>2018-04-27T06:17:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>效率</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/12/%E4%BB%A4%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0%E5%9C%A8%E7%AD%89%E5%80%BC%E6%83%85%E5%86%B5%E4%B8%8B%E8%BF%94%E5%9B%9Efalse%EF%BC%88%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F%E5%8C%96%EF%BC%89/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>21.令比较函数在等值情况下返回false（严格弱序化）</title>
        <pubTime>2018-04-12T01:58:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
        <tag>关联容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/12/%E4%BB%A5pass-by-refernce-to-const%E4%BB%A3%E6%9B%BFpass-by-value/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>21.以pass-by-refernce-to-const代替pass-by-value</title>
        <pubTime>2018-04-12T03:02:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/13/%E4%BB%A5non-member%20non-friend%E5%87%BD%E6%95%B0%E6%9B%BF%E6%8D%A2member%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>24.以non-member non-friend函数替换member函数</title>
        <pubTime>2018-04-13T07:07:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/11/%E4%BB%A5%E7%8B%AC%E7%AB%8B%E8%AF%AD%E5%8F%A5%E5%B0%86newed%E5%AF%B9%E8%B1%A1%E7%BD%AE%E5%85%A5%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>18.以独立语句将newed对象置入智能指针</title>
        <pubTime>2018-04-11T01:45:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>资源管理</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/20/%E4%BB%A5%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E4%BB%A3%E6%9B%BF%E5%90%8C%E5%90%8D%E7%AE%97%E6%B3%95/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>44.以成员函数代替同名算法</title>
        <pubTime>2018-04-20T05:50:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/19/%E4%BB%BF%E5%87%BD%E6%95%B0%E7%B1%BB%E7%9A%84%E9%80%82%E9%85%8D%E6%80%A7/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>40.仿函数类的适配性</title>
        <pubTime>2018-04-19T02:03:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>仿函数</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/16/%E4%BD%BF%E7%94%A8init%E6%8D%95%E8%8E%B7%E5%B0%86%E5%AF%B9%E8%B1%A1%E7%A7%BB%E5%8A%A8%E5%88%B0%E9%97%AD%E5%8C%85%E4%B8%AD/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>32.使用init捕获将对象移动到闭包中</title>
        <pubTime>2018-07-16T07:41:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/25/%E4%BD%BF%E7%94%A8%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E9%98%B2%E6%AD%A2%E8%B5%84%E6%BA%90%E6%B3%84%E6%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>9.使用析构函数防止资源泄漏</title>
        <pubTime>2018-04-25T02:19:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>资源管理</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/01/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B7%AE%E5%BC%82/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>关于对象——对象的差异</title>
        <pubTime>2018-05-01T02:20:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/11/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E3%80%81%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E3%80%81%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>右值引用、移动语义、完美转发</title>
        <pubTime>2018-07-11T10:02:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/19/%E5%88%A4%E6%96%AD%E5%BC%8F%E5%BF%85%E9%A1%BB%E4%B8%BA%E7%BA%AF%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>39.判断式必须为纯函数</title>
        <pubTime>2018-04-18T23:03:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>仿函数</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/07/%E5%9C%A8%E6%9E%90%E6%9E%84%E5%89%8D%E8%AE%B0%E5%BE%97delete%E5%AE%B9%E5%99%A8%E5%86%85%E9%80%9A%E8%BF%87new%E5%BE%97%E5%88%B0%E7%9A%84%E6%8C%87%E9%92%88/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>7.在析构前记得delete容器内通过new得到的指针</title>
        <pubTime>2018-04-07T08:58:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/18/%E5%AF%B9%E7%BA%BF%E7%A8%8B%E5%8F%A5%E6%9F%84%E6%9E%90%E6%9E%84%E8%A1%8C%E4%B8%BA%E4%BF%9D%E6%8C%81%E5%85%B3%E6%B3%A8/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>38.对线程句柄析构行为保持关注</title>
        <pubTime>2018-07-18T07:35:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/05/%E5%AF%BC%E8%AF%BB/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>1.导读</title>
        <pubTime>2018-04-05T11:01:24.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/06/%E5%B0%BD%E5%8F%AF%E8%83%BD%E4%BD%BF%E7%94%A8const%20/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>4.尽可能使用const</title>
        <pubTime>2018-04-06T12:23:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2019/04/20/%E5%90%8C%E6%AD%A5%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E7%AD%89%E5%BE%85%E4%BA%8B%E4%BB%B6%E6%88%96%E6%9D%A1%E4%BB%B6/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>同步并发操作——等待事件或条件</title>
        <pubTime>2019-04-20T04:27:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>并发编程</tag>
         
         
           
             
              <breadCrumb title="C++并发编程实战" url="https://xander.wiki/categories/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/13/%E5%B0%BD%E5%8F%AF%E8%83%BD%E4%BB%A5iterator%E4%BB%A3%E6%9B%BF%E5%85%B6const%E6%88%96reverse%E7%89%88%E6%9C%AC/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>26.尽可能以iterator代替其const或reverse版本</title>
        <pubTime>2018-04-13T10:08:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>迭代器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/17/%E5%BF%85%E9%A1%BB%E5%BC%82%E6%AD%A5%E6%97%B6%E8%AF%B7%E4%BD%BF%E7%94%A8stdlaunchasync/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>36.必须异步时请使用std::launch::async</title>
        <pubTime>2018-07-17T12:51:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/30/%E6%89%A7%E8%A1%8C%E6%9C%9F%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94new%E4%B8%8Edelete%E8%BF%90%E7%AE%97%E7%AC%A6/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>执行期语义学——new与delete运算符</title>
        <pubTime>2018-05-29T23:05:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/22/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>1.指针与引用的区别</title>
        <pubTime>2018-04-21T23:29:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/29/%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E3%80%81%E6%8B%B7%E8%B4%9D%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6%E8%AF%AD%E4%B9%89%E5%AD%A6/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>构造、析构、拷贝语义学——对象复制语义学</title>
        <pubTime>2018-05-29T04:47:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/17/%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E3%80%81%E6%8B%B7%E8%B4%9D%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%BC%E8%AF%BB/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>构造、析构、拷贝语义学——导读</title>
        <pubTime>2018-05-17T05:27:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/23/%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>49.模板元编程</title>
        <pubTime>2018-04-23T05:23:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>模板与泛型编程</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/05/29/%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E3%80%81%E6%8B%B7%E8%B4%9D%E8%AF%AD%E4%B9%89%E5%AD%A6%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB%E4%B8%8B%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>构造、析构、拷贝语义学——继承体系下的对象构造</title>
        <pubTime>2018-05-29T01:17:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>对象模型</tag>
         
         
           
             
              <breadCrumb title="Inside the C++ object model" url="https://xander.wiki/categories/Inside-the-C-object-model/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/11/%E7%90%86%E8%A7%A3stdmove%E4%B8%8Estdforward/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>23.理解std::move与std::forward</title>
        <pubTime>2018-07-11T11:02:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/20/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E4%BC%98%E4%BA%8E%E6%98%BE%E5%BC%8F%E5%BE%AA%E7%8E%AF/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>43.泛型算法优于显式循环</title>
        <pubTime>2018-04-20T04:11:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>泛型算法</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/25/%E7%A6%81%E6%AD%A2%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92%E5%88%B0%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E4%B9%8B%E5%A4%96/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>11.禁止异常信息传递到析构函数之外</title>
        <pubTime>2018-04-25T07:04:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>异常</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/12/%E7%A6%81%E6%AD%A2%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9set%E6%88%96mutiset%E7%9A%84key/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>21.禁止直接修改set或mutiset的key</title>
        <pubTime>2018-04-12T04:35:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
        <tag>关联容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/23/%E7%A6%81%E6%AD%A2%E5%AF%B9%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8%E5%A4%9A%E6%80%81/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>3.禁止对数组使用多态</title>
        <pubTime>2018-04-23T04:59:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/18/%E8%80%83%E8%99%91virtual%E4%BB%A5%E5%A4%96%E7%9A%84%E9%80%89%E6%8B%A9/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>36.考虑virtual以外的选择</title>
        <pubTime>2018-04-18T06:18:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>设计模式</tag>
         
        <tag>面向对象</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>5.自定义隐式转换函数</title>
        <pubTime>2018-04-24T02:50:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>类型转换</tag>
         
        <tag>操作符</tag>
         
         
           
             
              <breadCrumb title="More Effective C++" url="https://xander.wiki/categories/More-Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/13/%E8%8B%A5%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%E5%9D%87%E9%9C%80%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%8C%E8%AF%B7%E4%B8%BA%E6%AD%A4%E9%87%87%E7%94%A8non-member%E5%87%BD%E6%95%B0/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>25.若所有参数均需类型转换，请为此采用non-member函数</title>
        <pubTime>2018-04-13T10:54:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/12/%E8%AF%A5%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E6%97%B6%E5%88%99%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>22.该返回对象时则返回对象</title>
        <pubTime>2018-04-12T05:12:00.000Z</pubTime>
        
        <tag>C++</tag>
         
         
           
             
              <breadCrumb title="Effective C++" url="https://xander.wiki/categories/Effective-C/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/04/11/%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8vector%20bool/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>18.避免使用vector&lt;bool></title>
        <pubTime>2018-04-11T01:26:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>STL</tag>
         
        <tag>容器</tag>
         
         
           
             
              <breadCrumb title="Effective STL" url="https://xander.wiki/categories/Effective-STL/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>https://xander.wiki/2018/07/16/%E9%81%BF%E5%85%8D%E9%BB%98%E8%AE%A4%E6%8D%95%E8%8E%B7%E6%A8%A1%E5%BC%8F/</loc>
    <lastmod>2021-06-23T07:44:07.000Z</lastmod>
    <data>
        <display>
        <title>31.避免默认捕获模式</title>
        <pubTime>2018-07-16T01:41:00.000Z</pubTime>
        
        <tag>C++</tag>
         
        <tag>Modern C++</tag>
         
         
           
             
              <breadCrumb title="Effective Modern C++" url="https://xander.wiki/categories/Effective-Modern-C/"/>
          
        </display>
    </data>
    </url>

    
    
    
</urlset>